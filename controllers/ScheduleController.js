import log from "../logging/logging.js"
import facultyService from "../services/facultyService.js"
import programService from "../services/programService.js"
import groupService from "../services/groupService.js";
import axios from "axios";
import scheduleService from "../services/scheduleService.js";
import userService from "../services/userService.js";
import {unexpectedErrorController} from "../exceptions/bot/unexpectedErrorController.js";

export let schedule_cache = {}

class ScheduleController {
    getRowMarkup(data, refTo) {
        return {
            inline_keyboard: data.map((item) => [{
                text: item.name, callback_data: `${refTo}|${item.id}|0`
            }])
        }
    }

    configureMenuData(data, page) {
        const row_per_page = 10
        const page_count = Math.floor(data.length / row_per_page)
        if (page > page_count) {
            page = 0
        }
        if (page < 0) {
            page = page_count
        }
        const start_index = row_per_page * page;

        return {
            data: data.slice(start_index, start_index + row_per_page), page, page_count
        }
    }

    formatElapsedTime(timestamp) {
        const now = new Date();
        const diffInSeconds = Math.floor((now - timestamp) / 1000);

        if (diffInSeconds < 60) {
            return `‚úÖ ${diffInSeconds} —Å–µ–∫`;
        } else if (diffInSeconds < 3600) {
            const minutes = Math.floor(diffInSeconds / 60);
            return `‚úÖ ${minutes} –º–∏–Ω`;
        } else if (diffInSeconds < 86400) {
            const hours = Math.floor(diffInSeconds / 3600);
            return `üëé ${hours} —á`;
        } else {
            const days = Math.floor(diffInSeconds / 86400);
            return `üëé ${days} –¥–Ω`;
        }
    }

    formatTimestamp(timestamp) {
        const date = new Date(timestamp);

        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');

        return `${hours}:${minutes}:${seconds}`;
    }

    async getCurrentDayNumber() {
        const currentDate = new Date();
        if (currentDate.getHours() >= 18) {
            return ((currentDate.getDay() + 6) % 7) + 1;
        }
        return (currentDate.getDay() + 6) % 7;
    }

    async getFacultyMenu(bot, message, prePage) {
        try {
            const faculties = await facultyService.getAll()

            const {data, page, page_count} = this.configureMenuData(faculties, prePage)

            let markup = this.getRowMarkup(data, 'program')

            if (page_count > 0) {
                markup.inline_keyboard.push([{text: '‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data: `faculty|${page - 1}`},
                    {text: `üìÑ ${Number(page) + 1} –∏–∑ ${page_count + 1}`, callback_data: `nothing`},
                    {text: '–í–ø–µ—Ä–µ–¥‚û°Ô∏è', callback_data: `faculty|${page + 1}`}])
            }

            markup.inline_keyboard.push([{
                text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data: `start`
            }])

            await bot.editMessageText(`üìå –í—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞. \nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${Number(page) + 1} –∏–∑ ${page_count + 1}`, {
                chat_id: message.chat.id, message_id: message.message_id, reply_markup: markup
            })

        } catch (e) {
            throw e
        }

    }

    async getProgramMenu(bot, message, facultyId, prePage) {
        try {
            const programs = await programService.getByFacultyId(facultyId)
            const faculty = await facultyService.getById(facultyId)

            const {data, page, page_count} = this.configureMenuData(programs, prePage)

            let markup = this.getRowMarkup(data, `group|${facultyId}`)

            if (page_count > 0) {
                markup.inline_keyboard.push([{text: '‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data: `program|${facultyId}|${page - 1}`},
                    {text: `üìÑ ${Number(page) + 1} –∏–∑ ${page_count + 1}`, callback_data: `nothing`},
                    {text: '–í–ø–µ—Ä–µ–¥‚û°Ô∏è', callback_data: `program|${facultyId}|${page + 1}`
                }])
            }

            markup.inline_keyboard.push([{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data: `faculty|0`}])

            await bot.editMessageText(`üìå –í—ã–±–æ—Ä –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. \nüèõÔ∏è –§–∞–∫—É–ª—å—Ç–µ—Ç: ${faculty.name}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${Number(page) + 1} –∏–∑ ${page_count + 1}`, {
                chat_id: message.chat.id, message_id: message.message_id, reply_markup: markup
            })
        } catch (e) {
            throw e
        }
    }

    async getGroupMenu(bot, message, programId, facultyId, prePage) {
        try {
            const groups = await groupService.getByProgramId(programId)
            const program = await programService.getById(programId)

            const {data, page, page_count} = this.configureMenuData(groups, prePage)

            const day = await this.getCurrentDayNumber()

            let markup = {
                inline_keyboard: data.map((item) => [{
                    text: item.name, callback_data: `schedule|${item.language}|${item.id}|${day}`
                }])
            }

            if (page_count > 0) {
                markup.inline_keyboard.push([{
                    text: '‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data: `group|${facultyId}|${programId}|${page - 1}`},
                    {text: `üìÑ ${Number(page) + 1} –∏–∑ ${page_count + 1}`, callback_data: `nothing`},
                    {text: '–í–ø–µ—Ä–µ–¥‚û°Ô∏è', callback_data: `group|${facultyId}|${programId}|${page + 1}`}])
            }

            markup.inline_keyboard.push([{
                text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data: `program|${facultyId}|0`
            }])

            await bot.editMessageText(`üìå –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã. \nüìò –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: ${program.name}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${Number(page) + 1} –∏–∑ ${page_count + 1}`, {
                chat_id: message.chat.id, message_id: message.message_id, reply_markup: markup
            })
        } catch (e) {
            throw e
        }
    }

    async sendSchedule(bot, call, schedule_cache, preMessage = '') {
        try{
            const timestamp = schedule_cache.timestamp
            const data = schedule_cache.data
            const group = schedule_cache.group

            const data_array = call.data.split('|');
            let [, , , dayNumber] = data_array
            if (+dayNumber > 5) {
                dayNumber = 0
            }
            if (+dayNumber < 0) {
                dayNumber = 5
            }

            const scheduleLifeTime = this.formatElapsedTime(timestamp)
            const scheduleDateTime = this.formatTimestamp(timestamp)

            const schedule_day = data[dayNumber]['day']
            const preSchedule = data[dayNumber]['subjects'];

            const schedule = preSchedule.filter(obj => obj.subject !== '')

            // –ù—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –±—É–¥–µ—Ç.
            for(const dailySchedule of schedule){
                if (dailySchedule.subject === '\n'){
                    preMessage += '\n‚ö†Ô∏è–í–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—Å –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ. –°–≤–µ—Ä—å—Ç–µ—Å—å —Å schedule.ksu.kz. –ü—Ä–æ—Å—Ç–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ü•π. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –∑–Ω–∞—é—Ç –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ, –Ω–∞–¥–µ—é—Å—å –≤—ã –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–≤–∏–¥–µ—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n'
                    log.warn(`–í–∏–∂—É –∫—Ä–∏–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É –≥—Ä—É–ø–ø—ã ${group.id}`)
                    break
                }
            }

            let schedule_text = ``
            if (!schedule.length) {
                schedule_text = "ü•≥ <b>–í–´–•–û–î–ù–û–ô!</b>\n"
            }
            for (const item of schedule) {
                schedule_text += '‚åöÔ∏è ' + item.time + '\n'
                schedule_text += 'üìö ' + item.subject + '\n'
            }
            let end_text = `üï∞ <i><b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: üëá\n${scheduleLifeTime} –Ω–∞–∑–∞–¥ || ${scheduleDateTime}   üëà</b></i>\n` +
                'üìñ –ü–æ–º–æ—â—å: /help\n' +
                'üóû –ù–∞—à –∫–∞–Ω–∞–ª: @ksutolyan \n' +
                '<tg-spoiler>–£–≥–æ—Å—Ç–∏—Ç—å –∫–æ–º–ø–æ—Ç–æ–º: /donate </tg-spoiler>'
            let msg_text = `${preMessage}üë• –ì—Ä—É–ø–ø–∞: ${group.name} | –ö—É—Ä—Å: ${group.age}\nüìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ <b>${schedule_day}</b>:\n` + schedule_text + end_text

            const preCallback = data_array.slice(0, -1).join("|")

            let markup = {
                inline_keyboard: [[{text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: preCallback + `|${+dayNumber - 1}`}, {
                    text: `üîÑ`,
                    callback_data: 'refresh' + call.data
                }, {
                    text: `–í–ø–µ—Ä–µ–¥‚û°Ô∏è`, callback_data: preCallback + `|${+dayNumber + 1}`
                }],]
            }
            await bot.editMessageText(msg_text,
                {
                    message_id: call.message.message_id,
                    chat_id: call.message.chat.id,
                    parse_mode: "HTML",
                    reply_markup: markup,
                    disable_web_page_preview: true
                })
        }catch (e) {
            await unexpectedErrorController(e, bot, call.message, call.data)
        }
    }

    async getReservedSchedule(bot, call, groupId, error_text) {
        await bot.editMessageText(`üíÄ –ü—Ä–æ–∏–∑—à–ª–∞ –æ—à–∏–±–∫–∞. –°–µ–π—á–∞—Å –ø–æ–∏—â—É —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–æ–∏—Ö –Ω–µ–¥—Ä–∞—Ö...`, {
            chat_id: call.message.chat.id, message_id: call.message.message_id
        })
        const response = await scheduleService.getByGroupId(groupId)
        if (response) {
            const updatedAt = new Date(response.updatedAt);
            const timestamp = updatedAt.getTime();

            const group = await groupService.getById(groupId)
            schedule_cache[groupId] = {data: response.data, timestamp, group}
            await this.sendSchedule(bot, call, schedule_cache[groupId], `<b>${error_text} \n` +
                "ü´° –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n</b>")
        } else {
            await bot.editMessageText("üôà –ü–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥–µ—Ü –æ—Ç —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã?\n" +
                "‚ö†Ô∏è –Ø –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ schedule.ksu.kz, –∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏( \n" +
                "ü´¢ P.S. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ, –æ–Ω–æ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n" +
                "–ê –¥–∞–ª—å—à–µ —É–∂–µ –¥–µ–ª–æ –∑–∞ –º–∞–ª—ã–º, –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∞–∫–æ–º –Ω–µ–¥—Ä–∞–∑—É–º–µ–Ω–∏–∏ –º—ã –≤–æ–∑—å–º–µ–º —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã)\n" +
                "üòâ –ó–∞–≥—Ä—É–∑–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—ë –≤—Å—Ç–∞–Ω–µ—Ç –Ω–∞ –Ω–æ–≥–∏ –∏ –±–æ–ª—å—à–µ —Ç—ã –±–æ–ª—å—à–µ –Ω–µ —É–≤–∏–¥–∏—à—å —ç—Ç–æ –¥—É—Ä–∞—Ü–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!", {
                chat_id: call.message.chat.id, message_id: call.message.message_id, reply_markup: {
                    inline_keyboard: [[{text: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data: call.data}]]
                }
            })
        }
    }

    async getScheduleMenu(bot, call) {
        try {
            const data_array = call.data.split('|');
            let [, language, groupId] = data_array

            if (groupId in schedule_cache && Date.now() - schedule_cache[groupId].timestamp <= 30 * 60 * 1000) {
                await this.sendSchedule(bot, call, schedule_cache[groupId])
            } else {
                await axios.get(`https://api.tolyan.me/schedule/get_schedule_by_groupId/${groupId}/${language}`, {
                    timeout: 10000
                })
                    .then(async (response) => {
                        const group = await groupService.getById(groupId)
                        schedule_cache[groupId] = {data: response.data, timestamp: Date.now(), group}
                        await this.sendSchedule(bot, call, schedule_cache[groupId])

                        await scheduleService.updateByGroupId(groupId, response.data).catch(e => log.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –±–¥. groupId:${groupId}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏–∫–∞–∫ –Ω–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª.`, {
                            stack: e.stack, call, userId: call.message.chat.id
                        }))
                    })
                    .catch(async (e) => {
                        try {
                            log.warn(`Student ${call.message.chat.id} gets a cached schedule.`, {
                                stack:e.stack,
                                userId: call.message.chat.id
                            })
                            let error_text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ. –ü—Ä–æ—Å—Ç–∏—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞. ü•π"
                            if(e.response){
                                if (e.response.status === 503)
                                    error_text = "‚ö†Ô∏è schedule.ksu.kz –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç..."

                                if (e.response.status === 500){
                                    error_text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."
                                }
                            }
                            await this.getReservedSchedule(bot, call, groupId, error_text)
                        } catch (e) {
                            log.error("–û—à–±–∏–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", {
                                stack: e.stack,
                                call,
                                userId: call.message.chat.id
                            })
                            return await unexpectedErrorController(e, bot, call.message, call.data)
                        }
                    })
            }
            await userService.updateUser(call.message.chat.id, {
                userId: call.message.chat.id,
                userType: String(call.message.chat.type),
                userTitle: call.message.chat.title,
                firstName: call.message.chat.first_name,
                lastName: call.message.chat.last_name,
                username: call.message.chat.username,
                group: groupId,
                scheduleType:"student"
            }).catch((e) => log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. ", {
                stack: e.stack, call, userId: call.message.chat.id
            }))

        } catch (e) {
            return await unexpectedErrorController(e, bot, call.message, call.data)
        }

    }
}

export default new ScheduleController()