import log from "../logging/logging.js"
import facultyService from "../services/facultyService.js"
import programService from "../services/programService.js"
import groupService from "../services/groupService.js";
import axios from "axios";
import scheduleService from "../services/scheduleService.js";
import userService from "../services/userService.js";

export let schedule_cache = {}


function getRowMarkup(data, refTo) {
    return {
        inline_keyboard: data.map((item) => [{
            text: item.name, callback_data: `${refTo}|${item.id}|0`
        }])
    }
}

function configureMenuData(data, page) {
    const row_per_page = 10
    const page_count = Math.floor(data.length / row_per_page)
    if (page > page_count) {
        page = 0
    }
    if (page < 0) {
        page = page_count
    }
    const start_index = row_per_page * page;

    return {
        data: data.slice(start_index, start_index + row_per_page), page, page_count
    }
}

function formatElapsedTime(timestamp) {
    const now = new Date();
    const diffInSeconds = Math.floor((now - timestamp) / 1000);

    if (diffInSeconds < 60) {
        return `‚úÖ ${diffInSeconds} —Å–µ–∫`;
    } else if (diffInSeconds < 3600) {
        const minutes = Math.floor(diffInSeconds / 60);
        return `‚úÖ ${minutes} –º–∏–Ω`;
    } else if (diffInSeconds < 86400) {
        const hours = Math.floor(diffInSeconds / 3600);
        return `üëé ${hours} —á`;
    } else {
        const days = Math.floor(diffInSeconds / 86400);
        return `üëé ${days} –¥–Ω`;
    }
}

function formatTimestamp(timestamp) {
    const date = new Date(timestamp);

    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');

    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0'); // –ú–µ—Å—è—Ü—ã –≤ JavaScript –Ω—É–º–µ—Ä—É—é—Ç—Å—è —Å 0 –¥–æ 11, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º 1
    const year = String(date.getFullYear()).slice(2); // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —Ü–∏—Ñ—Ä—ã –≥–æ–¥–∞

    return `${hours}:${minutes}:${seconds} | ${day}.${month}.${year}`;
}

class ScheduleController {
    async getCurrentDayNumber() {
        const currentDate = new Date();
        if (currentDate.getHours() >= 18) {
            return ((currentDate.getDay() + 6) % 7) + 1;
        }
        return (currentDate.getDay() + 6) % 7;
    }

    async registerUser(msg) {
        try {
            const User = await userService.findUserById(msg.chat.id)
            if (!User) {
                await userService.createUser({
                    userId: msg.chat.id,
                    userType: String(msg.chat.type),
                    userTitle: msg.chat.title,
                    firstName: msg.chat.first_name,
                    lastName: msg.chat.last_name,
                    username: msg.chat.username,
                }).then(user => log.warn("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!", {user}))
            }
        } catch (e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", {stack: e.stack, msg})
        }
    }

    async startCommand(bot, msg) {
        const answer = await bot.sendMessage(msg.chat.id, "ü™Ñ –ü—ã—Ç–∞—é—Å—å –Ω–∞–∫–æ–¥–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤. –í–∂—É—Ö!", {parse_mode: 'html'})
        try {
            await this.getFacultyMenu(bot, answer, 0)
        } catch (e) {
            await this.errorHandler(e, bot, answer, "faculty|0")
        } finally {
            await this.registerUser(msg)
        }
    }

    async getFacultyMenu(bot, message, prePage) {
        try {
            const faculties = await facultyService.getAll()

            const {data, page, page_count} = configureMenuData(faculties, prePage)

            let markup = getRowMarkup(data, 'program')

            if (page_count > 0) {
                markup.inline_keyboard.push([{text: '‚¨ÖÔ∏è', callback_data: `faculty|${page - 1}`}, {
                    text: '‚û°Ô∏è', callback_data: `faculty|${page + 1}`
                }])
            }

            await bot.editMessageText(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${Number(page) + 1} –∏–∑ ${page_count + 1}`, {
                chat_id: message.chat.id, message_id: message.message_id, reply_markup: markup
            })

        } catch (e) {
            throw e
        }

    }

    async getProgramMenu(bot, message, facultyId, prePage) {
        try {
            const programs = await programService.getByFacultyId(facultyId)
            const faculty = await facultyService.getById(facultyId)

            const {data, page, page_count} = configureMenuData(programs, prePage)

            let markup = getRowMarkup(data, `group|${facultyId}`)

            if (page_count > 0) {
                markup.inline_keyboard.push([{text: '‚¨ÖÔ∏è', callback_data: `program|${facultyId}|${page - 1}`}, {
                    text: '‚û°Ô∏è', callback_data: `program|${facultyId}|${page + 1}`
                }])
            }

            markup.inline_keyboard.push([{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data: `faculty|0`}])

            await bot.editMessageText(`üèõÔ∏è –§–∞–∫—É–ª—å—Ç–µ—Ç: ${faculty.name}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${Number(page) + 1} –∏–∑ ${page_count + 1}`, {
                chat_id: message.chat.id, message_id: message.message_id, reply_markup: markup
            })
        } catch (e) {
            throw e
        }
    }

    async getGroupMenu(bot, message, programId, facultyId, prePage) {
        try {
            const groups = await groupService.getByProgramId(programId)
            const program = await programService.getById(programId)

            const {data, page, page_count} = configureMenuData(groups, prePage)

            const day = await this.getCurrentDayNumber()

            let markup = {
                inline_keyboard: data.map((item) => [{
                    text: item.name, callback_data: `schedule|${item.language}|${item.id}|${day}`
                }])
            }

            if (page_count > 0) {
                markup.inline_keyboard.push([{
                    text: '‚¨ÖÔ∏è', callback_data: `group|${facultyId}|${programId}|${page - 1}`
                }, {text: '‚û°Ô∏è', callback_data: `group|${facultyId}|${programId}|${page + 1}`}])
            }

            markup.inline_keyboard.push([{
                text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data: `program|${facultyId}|0`
            }])

            await bot.editMessageText(`üìò –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: ${program.name}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${Number(page) + 1} –∏–∑ ${page_count + 1}`, {
                chat_id: message.chat.id, message_id: message.message_id, reply_markup: markup
            })
        } catch (e) {
            throw e
        }
    }

    async sendSchedule(bot, call, schedule_cache, preMessage = '') {
        const timestamp = schedule_cache.timestamp
        const data = schedule_cache.data
        const group = schedule_cache.group

        const data_array = call.data.split('|');
        let [, , , dayNumber] = data_array
        if (+dayNumber > 5) {
            dayNumber = 0
        }
        if (+dayNumber < 0) {
            dayNumber = 5
        }

        const scheduleLifeTime = formatElapsedTime(timestamp)
        const scheduleDateTime = formatTimestamp(timestamp)

        const schedule_day = data[dayNumber]['day']
        const schedule = data[dayNumber]['subjects']

        let schedule_text = ``
        if (!schedule.length) {
            schedule_text = "ü•≥ <b>–í–´–•–û–î–ù–û–ô!</b>\n"
        }
        for (const item of schedule) {
            schedule_text += '‚åöÔ∏è ' + item.time + '\n'
            schedule_text += 'üìö ' + item.subject + '\n'
        }
        let end_text = `üï∞ <i><b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${scheduleDateTime} || ${scheduleLifeTime} –Ω–∞–∑–∞–¥.</b></i>\n` +
            'üìñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help\n' +
            'üóû –ù–∞—à –∫–∞–Ω–∞–ª: https://t.me/ksutolyan (–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–ø—Ä–æ—Å)\n' +
            '<tg-spoiler>–£–≥–æ—Å—Ç–∏—Ç—å –∫–æ–º–ø–æ—Ç–æ–º: /donate </tg-spoiler>'
        let msg_text = `${preMessage}üë• –ì—Ä—É–ø–ø–∞: ${group.name} | –ö—É—Ä—Å: ${group.age}\nüìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ <b>${schedule_day}</b>:\n` + schedule_text + end_text

        const preCallback = data_array.slice(0, -1).join("|")

        let markup = {
            inline_keyboard: [[{text: `‚¨ÖÔ∏è`, callback_data: preCallback + `|${+dayNumber - 1}`}, {
                text: `üîÑ`,
                callback_data: 'refresh' + call.data
            }, {
                text: `‚û°Ô∏è`, callback_data: preCallback + `|${+dayNumber + 1}`
            }],]
        }
        await bot.editMessageText(msg_text, {
            message_id: call.message.message_id,
            chat_id: call.message.chat.id,
            parse_mode: "html",
            reply_markup: markup,
            disable_web_page_preview: true
        })
    }

    async getScheduleMenu(bot, call) {
        try {
            const data_array = call.data.split('|');
            let [, language, groupId] = data_array

            if (groupId in schedule_cache && Date.now() - schedule_cache[groupId].timestamp <= 30 * 60 * 1000) {
                await this.sendSchedule(bot, call, schedule_cache[groupId])
            } else {
                await axios.get(`http://79.133.182.125:5000/api/schedule/get_schedule_by_groupId/${groupId}/${language}`, {
                    timeout: 10000
                })
                    .then(async (response) => {
                        const group = await groupService.getById(groupId)
                        schedule_cache[groupId] = {data: response.data, timestamp: Date.now(), group}
                        await this.sendSchedule(bot, call, schedule_cache[groupId])

                        await scheduleService.updateByGroupId(groupId, response.data).catch(e => log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –±–¥", {
                            stack: e.stack, call
                        }))
                    })
                    .catch(async () => {
                        try {
                            log.info(`User ${call.message.chat.id} gets a cached schedule.`)
                            await bot.editMessageText('üíÄ schedule.ksu.kz –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –°–µ–π—á–∞—Å –ø–æ–∏—â—É —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–æ–∏—Ö –Ω–µ–¥—Ä–∞—Ö...', {
                                chat_id: call.message.chat.id, message_id: call.message.message_id
                            })
                            const response = await scheduleService.getByGroupId(groupId)
                            if (response) {
                                const updatedAt = new Date(response.updatedAt);
                                const timestamp = updatedAt.getTime();

                                const group = await groupService.getById(groupId)
                                schedule_cache[groupId] = {data: response.data, timestamp, group}
                                await this.sendSchedule(bot, call, schedule_cache[groupId], "<b>‚ö†Ô∏è schedule.ksu.kz –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. \n" +
                                    "ü´° –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n</b>")
                            } else {
                                await bot.editMessageText("üôà –ü–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥–µ—Ü –æ—Ç —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã?\n" +
                                    "‚ö†Ô∏è –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –ö–∞—Ä–£ - —É–ø–∞–ª, –∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏( \n" +
                                    "ü´¢ P.S. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ, –æ–Ω–æ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n" +
                                    "–ê –¥–∞–ª—å—à–µ —É–∂–µ –¥–µ–ª–æ –∑–∞ –º–∞–ª—ã–º, –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∞–∫–æ–º –ø–∞–¥–µ–Ω–∏–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –º—ã –≤–æ–∑—å–º–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã)\n" +
                                    "üòâ –ó–∞–≥—Ä—É–∑–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ schedule.ksu.kz –≤—Å—Ç–∞–Ω–µ—Ç –Ω–∞ –Ω–æ–≥–∏ –∏ –±–æ–ª—å—à–µ —Ç—ã –Ω–µ —É–≤–∏–¥–∏—à—å —ç—Ç–æ –¥—É—Ä–∞—Ü–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!", {
                                    chat_id: call.message.chat.id, message_id: call.message.message_id, reply_markup: {
                                        inline_keyboard: [[{text: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data: call.data}]]
                                    }
                                })
                            }
                        } catch (e) {
                            log.error("–û—à–±–∏–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", {stack: e.stack, call})
                            await this.errorHandler(e, bot, call.message, call.data)
                        }
                    })
            }
            await userService.updateUser(call.message.chat.id, {
                userId: call.message.chat.id,
                userType: String(call.message.chat.type),
                userTitle: call.message.chat.title,
                firstName: call.message.chat.first_name,
                lastName: call.message.chat.last_name,
                username: call.message.chat.username,
                group: groupId
            }).catch((e) => log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. ", {
                stack: e.stack,
                call
            }))

        } catch (e) {
            await this.errorHandler(e, bot, call.message, call.data)
        }

    }

    async getSchedule(bot, msg) {
        const answer = await bot.sendMessage(msg.chat.id, "ü™Ñ –ü—ã—Ç–∞—é—Å—å –Ω–∞–∫–æ–¥–æ–≤–∞—Ç—å —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –í–∂—É—Ö!", {parse_mode: 'html'})
        try {
            const User = await userService.getUserById(msg.chat.id)
            if (!User) {
                await bot.deleteMessage(msg.chat.id, answer.message_id);
                return this.startCommand(bot, msg);
            }

            const groupId = User.group
            if (!groupId) {
                await bot.deleteMessage(msg.chat.id, answer.message_id);
                return this.startCommand(bot, msg);
            }
            const Group = await groupService.getById(groupId)
            if (!Group) {
                log.error(`!!! USER ${msg.chat.id} –£–ß–ò–¢–°–Ø –í –ì–†–£–ü–ü–ï –ö–û–¢–û–†–û–ô –ù–ï–¢ –í –ë–î.`, {User})
                return bot.editMessageText("‚ö†Ô∏è –Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —É—á–∏—à—å—Å—è(\n" +
                    "2 –≤–∞—Ä–∏–∞–Ω—Ç–∞. –õ–∏–±–æ —è —Å–ª–æ–º–∞–ª—Å—è —á—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ. –õ–∏–±–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞. \n" +
                    "–ü–æ–ø—Ä–æ–±—É–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", {
                    chat_id: answer.chat.id, message_id: answer.message_id
                })
            }
            const language = Group.language
            const day = await this.getCurrentDayNumber()

            const call = {
                data: `schedule|${language}|${groupId}|${day}`,
                message: answer
            }
            await this.getScheduleMenu(bot, call)
        } catch (e) {
            log.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ /schedule: ` + e.message, {stack: e.stack, msg})
            await bot.editMessageText("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–æ—á–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start. –í–æ–∑–º–æ–∂–Ω–æ —è —Å–ª–æ–º–∞–ª—Å—è –∏ –º–µ–Ω—è —Å–∫–æ—Ä–æ –ø–æ—á–∏–Ω—è—Ç.", {
                chat_id: answer.chat.id, message_id: answer.message_id
            })
        }

    }

    async errorHandler(e, bot, message, callback_data) {
        try {
            log.error(`User ${message.chat.id} got an error at ${callback_data}. –î–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.`, {
                stack: e.stack, message, callback_data
            })
            await bot.editMessageText("‚ö†Ô∏è –î–∏–∫–æ –∏–∑–≤–∏–Ω—è–µ–º—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞." + "\nüî© –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —è —É–∂–µ –≤—ã–∑–≤–∞–ª —Ñ–∏–∫—Å–∏–∫–æ–≤! –ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤—Å—ë –ø–æ—á–∏–Ω–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!", {
                chat_id: message.chat.id, message_id: message.message_id, reply_markup: {
                    inline_keyboard: [[{text: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data}]]
                }
            })
        } catch (e) {
            log.error("–£–õ–¨–¢–†–ê –ú–ï–ì–ê –í–ê–ñ–ù–û! –û–®–ò–ë–ö–ê –ü–†–ò –ü–û–ü–´–¢–ö–ï –û–ë–†–ê–ë–û–¢–ê–¢–¨ –û–®–ò–ë–ö–£! errorHandler",
                {stack: e.stack, message})
        }
    }

    async validateErrorHandler(bot, call) {
        try {
            log.error(`User ${call.message.chat.id} used an incorrect callback: ${call.data}. –î–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö. –ï–º—É —Å–∫–∞–∑–∞–Ω–æ —à–æ–± /start –ø–∏—Å–∞–ª!`, {
                call
            })
            await bot.editMessageText("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n" +
                "–í–µ—Ä–æ—è—Ç–Ω–æ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø—Ä–∏—Å–ª–∞–ª –±–æ—Ç –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n" +
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–ø–∏—Å–∞—Ç—å /start –∏ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n" +
                "–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ https://t.me/lena_nebot", {
                chat_id: call.message.chat.id, message_id: call.message.message_id
            })
        } catch (e) {
            log.error("–£–õ–¨–¢–†–ê –ú–ï–ì–ê –í–ê–ñ–ù–û! –û–®–ò–ë–ö–ê –ü–†–ò –ü–û–ü–´–¢–ö–ï –û–ë–†–ê–ë–û–¢–ê–¢–¨ –û–®–ò–ë–ö–£! validateErrorHandler",
                {stack: e.stack, call})
        }
    }
}

export default new ScheduleController()