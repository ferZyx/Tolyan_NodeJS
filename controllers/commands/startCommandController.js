import userService from "../../services/userService.js";
import log from "../../logging/logging.js";
import {bot} from "../../app.js";
import {commandAntiSpamMiddleware} from "../../middlewares/bot/commandAntiSpamMiddleware.js";
import i18next from "i18next"
import {criticalErrorController} from "../../exceptions/bot/criticalErrorController.js";

const inline_keyboard = {
    inline_keyboard: [[{text: "–†—É—Å—Å–∫–∏–π", callback_data: "languageIsRu"}], [{
        text: "“ö–∞–∑–∞“õ",
        callback_data: "languageIsKz"
    }], [{text: "¬†", callback_data: "nothing"}, {text: "‚ùå", callback_data: "delete"}, {
        text: "¬†",
        callback_data: "nothing"
    }]]
}

const msg_text = 'üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. \n' +
    'üåç –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—Ç—ñ“£ —Ç—ñ–ª —Ç–∞–Ω–¥–∞“£—ã–∑. '

const errorCatch = async (e, msg) => {
    log.error(`–í–ê–ñ–ù–û!User ${msg.chat.id}! –û–®–ò–ë–ö–ê –í startCommandController. –Æ–∑–µ—Ä—É —Å–∫–∞–∑–∞–Ω–æ —á—Ç–æ –±–æ—Ç –ø—Ä–∏–±–æ–µ–ª.` + e.message, {stack: e.stack})
    await criticalErrorController(msg)
}

export async function startCommandController(msg) {
    await commandAntiSpamMiddleware(msg, async () => {
        try {
            await bot.sendMessage(msg.chat.id, msg_text, {reply_markup: inline_keyboard, parse_mode: "HTML"})
        } catch (e) {
            await errorCatch(e, msg)
        } finally {
            await userService.registerUser(msg)
                .catch(e => log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –Æ–∑–µ—Ä –Ω–∏–∫–∞–∫ –Ω–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª: " + e.message, {
                    stack: e.stack, userId: msg.chat.id
                }))
        }
    });
}

export async function welcomePageRedirectController(call) {
    try{
        const user_language = await userService.getUserLanguage(call.message.chat.id)

        const keyboard = {
            keyboard: [[{text: `üì¢ ${i18next.t('news', {lng:user_language})}`}, {text: `üóí ${i18next.t('new_schedule', {lng:user_language})}`}, {text: `üí° ${i18next.t('help', {lng:user_language})}`}],
                [{text: `üóì ${i18next.t('teacher_schedule', {lng:user_language})}`}, {text: `üóì ${i18next.t('student_schedule', {lng:user_language})}`}],

            ],
            one_time_keyboard: false,
            resize_keyboard: true
        }

        const msg_text = `üßô ${i18next.t('welcome_page', {lng:user_language})}`

        await bot.deleteMessage(call.message.chat.id, call.message.message_id)
        await bot.sendMessage(call.message.chat.id, msg_text, {reply_markup: keyboard, parse_mode: "HTML"})
    }catch (e) {
        log.error(`–í–ê–ñ–ù–û!User ${call.message.chat.id}! –û–®–ò–ë–ö–ê –í welcomePage. –Æ–∑–µ—Ä—É —Å–∫–∞–∑–∞–Ω–æ —á—Ç–æ –±–æ—Ç –ø—Ä–∏–±–æ–µ–ª.` + e.message, {stack: e.stack})
        await criticalErrorController(call.message)
    }

}