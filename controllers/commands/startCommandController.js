import userService from "../../services/userService.js";
import log from "../../logging/logging.js";
import {bot} from "../../app.js";
import {commandAntiSpamMiddleware} from "../../middlewares/bot/commandAntiSpamMiddleware.js";

const keyboard = {
    inline_keyboard: [[{text: "ü§ì –°—Ç—É–¥–µ–Ω—Ç", callback_data: "faculty|0"}],
        [{text: "üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data: "department|0"}],
        [{text: "¬†", callback_data: "nothing"},
            {text: "‚ùå", callback_data: "delete"},
            {text: "¬†", callback_data: "nothing"}]
    ]
}

const msg_text = "‚öôÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\nüëã –ß—å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?"

const errorCatch = async (e, msg) =>{
    log.error(`–í–ê–ñ–ù–û!User ${msg.chat.id}! –û–®–ò–ë–ö–ê –í startCommandController. –Æ–∑–µ—Ä—É —Å–∫–∞–∑–∞–Ω–æ —á—Ç–æ –±–æ—Ç –ø—Ä–∏–±–æ–µ–ª.` + e.message, {stack: e.stack})
    bot.sendMessage(msg.chat.id, "‚ö†Ô∏è –ë–æ—Ç –Ω–µ–º–Ω–æ–∂–∫–æ –ø—Ä–∏–±–æ–ª–µ–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ").catch(e => console.error(e))
}



export async function startCommandController(msg) {
    await commandAntiSpamMiddleware(msg, async () => {
        try {
            await bot.sendMessage(msg.chat.id, msg_text, {
                reply_markup: keyboard
            })

        } catch (e) {
             await errorCatch(e, msg)
        } finally {
            await userService.registerUser(msg)
                .catch(e => log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –Æ–∑–µ—Ä –Ω–∏–∫–∞–∫ –Ω–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª: " + e.message, {
                    stack: e.stack,
                    userId: msg.chat.id
                }))
        }
    });

}

export async function redirectToStartMenu(call) {
    try {
        await bot.editMessageText("üëã –ß—å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?", {
            chat_id: call.message.chat.id, message_id: call.message.message_id,
            reply_markup: {
                inline_keyboard: [[{text: "ü§ì –°—Ç—É–¥–µ–Ω—Ç", callback_data: "faculty|0"}],
                    [{text: "üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data: "department|0"}]]
            }
        })
    } catch (e) {
        await errorCatch(e, call.message)
    } finally {
        await userService.registerUser(call.message).catch(e => log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.message, {
            stack: e.stack,
            userId: call.message.chat.id
        }))
    }
}
